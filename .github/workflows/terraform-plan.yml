name: Terraform Plan

on: 
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  terraform-plan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: opentofu/setup-opentofu@v1
      - name: tofu init
        run: tofu init
      - name: tofu plan
        run: tofu plan -no-color -var="repo_fullname=Jacob-Bordelon/personal-terraform"
        id: plan
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ github.token }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })

            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('<!-- opentofu-bot -->')
            })

            const output = `
              <!-- opentofu-bot -->
              #### OpenTofu Plan ðŸ“–\`${{ steps.plan.outcome }}\`
              \`\`\`hcl\n
              ${process.env.PLAN}
              \`\`\`
              *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*
            `;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
