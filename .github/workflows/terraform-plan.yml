name: 'Plan'

on: 
  pull_request:
    types:
      - opened
      - closed
      - edited
      - synchronize
    # paths-ignore:
    #   - '.github/**'

permissions:
  id-token: write
  contents: read 
  pull-requests: write
  issues: write

jobs:
  tofu-init:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: opentofu/setup-opentofu@v1
      - run: tofu init
  
  tofu-plan:
    runs-on: ubuntu-latest
    needs: [tofu-init]
    steps:
      - uses: actions/checkout@v4
      - uses: opentofu/setup-opentofu@v1
      - run: tofu init
      - name: 'Tofu Plan'
        id: plan
        env:
          TF_VAR_repo_fullname: 'Jacob-Bordelon/personal-terraform'
          TF_VAR_env_name: 'production'
        run: tofu plan -no-color -out plan.tfplan

      - name: Upload Plan to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tofu-plan
          path: plan.tfplan
          retention-days: 1

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ github.token }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })

            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('<!-- opentofu-bot -->')
            })

            const output = `
              <!-- opentofu-bot -->
              #### OpenTofu Plan ðŸ“–\`${{ steps.plan.outcome }}\`
              \`\`\`hcl\n
              ${process.env.PLAN}
              \`\`\`
              *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*
            `;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
  
  tofu-apply:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    needs: [tofu-init, tofu-plan]
    environment: 'staging'
    steps:
      - name: Download Plan
        uses: actions/download-artifact@v4
        with:
          name: tofu-plan
      - uses: actions/checkout@v4
      - uses: opentofu/setup-opentofu@v1
      - run: tofu init
      - name: 'Tofu Apply'
        run: echo "Apply Changes"


  # comment:
  #   needs: [tofu-init, tofu-plan]
  #   runs-on: ubuntu-latest
    # steps:
    #   - name: Download Plan
    #     uses: actions/download-artifact@v4
    #     with:
    #       name: tofu-plan

  #     - name: Set plan variable in output
  #       id: plan
  #       run: |
  #         {
  #           echo 'PLAN<<EOF'
  #           cat tofu-plan.txt
  #           echo EOF
  #         } >> "$GITHUB_OUTPUT"

  #     - name: Find Comment
  #       uses: peter-evans/find-comment@v3
  #       continue-on-error: true
  #       id: fc
  #       with:
  #         issue-number: ${{ github.event.pull_request.number }}
  #         comment-author: 'github-actions[bot]'
  #         body-includes: <!-- opentofu-bot -->

  #     - name: Create or Update comment
  #       uses: peter-evans/create-or-update-comment@v4
  #       with:
  #         comment-id: ${{ steps.fc.outputs.comment-id }}
  #         issue-number: ${{ github.event.pull_request.number }}
  #         edit-mode: replace
  #         body: |
  #           <!-- opentofu-bot -->
  #           Terraform Plan
  #           ```hcl
  #             ${{ steps.plan.outputs.PLAN }}
  #           ```
