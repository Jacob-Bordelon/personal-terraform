name: Terraform Plan

on: 
  pull_request:
    types:
      - opened
      - synchronize

permissions:
  id-token: write
  contents: read 
  pull-requests: write
  issues: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  get-modules:
    runs-on: ubuntu-latest
    outputs:
      directories: ${{ steps.ls.outputs.directories }}
    steps:
      - uses: actions/checkout@v4
      - id: ls
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          temp=$(gh pr diff ${{ github.event.pull_request.number }} --name-only | grep '^src/' | awk -F'/' '{if (NF>2) print $2; else print "/"}' | uniq | jq -R -s -c 'split("\n")[:-1]')
          # temp=$(ls src | jq -R -s -c 'split("\n")[:-1]')
          echo "directories=$temp" >> $GITHUB_OUTPUT
    

  terraform-plan:
    runs-on: ubuntu-latest
    needs: [get-modules]    
    strategy:
      fail-fast: true
      matrix:
        dir: ${{ fromJson(needs.get-modules.outputs.directories) }}
    outputs:
      plans: ${{ toJson(steps.store.outputs.*) }}
    steps:
      - uses: actions/checkout@v4
      - name: store plan
        id: store
        env:
          PLAN: "src/${{ matrix.dir }}"
          DIR: "${{ matrix.dir }}"
        run: |
          {
            echo "$DIR<<EOF"
            echo $PLAN
            echo "EOF"
          } >> $GITHUB_OUTPUT
      - name: 'See output'
        run: |
          cat $GITHUB_OUTPUT
      # - uses: opentofu/setup-opentofu@v1
      # - name: tofu init
      #   working-directory: src/${{ matrix.dir }}
      #   run: tofu init
      # - name: tofu plan
      #   working-directory: src/${{ matrix.dir }}
      #   env:
      #     TF_IN_AUTOMATION: true
      #   run: tofu plan -no-color -var="repo_fullname=Jacob-Bordelon/personal-terraform"
      #   id: plan
      # - name: store plan
      #   id: store
      #   env:
      #     PLAN: "${{ steps.plan.outputs.stdout }}"
      #   run: |
      #     {
      #       echo "JSON_RESPONSE<<EOF"
      #       echo $PLAN
      #       echo "EOF"
      #     } >> $GITHUB_OUTPUT

  push-comment:
    runs-on: ubuntu-latest
    needs: [terraform-plan]
    steps:
      - name: 'plans'
        run: |
          echo "${{ needs.terraform-plan.outputs.plans }}"
      # - uses: actions/github-script@v6
      #   if: github.event_name == 'pull_request'
      #   env:
      #     PLAN: "${{ steps.plan.outputs.stdout }}"
      #     DIR: "${{ matrix.dir }}"
      #   with:
      #     github-token: ${{ github.token }}
      #     script: |
      #       const { data: comments } = await github.rest.issues.listComments({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number: context.issue.number,
      #       })

      #       const datetime = new Date().toLocaleString()
      #       const source = process.env.DIR
      #       const commentMark = `<!-- opentofu-bot-${source} -->`

      #       const botComment = comments.find(comment => {
      #         return comment.user.type === 'Bot' && comment.body.includes(commentMark)
      #       })

      #       const output = `
      #         ${ commentMark }
      #         ## **Source: _${source}_**
      #         #### OpenTofu Plan ðŸ“–\`${{ steps.plan.outcome }}\`
      #         \`\`\`hcl\n
      #         ${process.env.PLAN}
      #         \`\`\`
      #         *Pusher: @${{ github.actor }}*
      #         _Updated at: ${datetime}_
      #       `;

      #       // 3. If we have a comment, update it, otherwise create a new one
      #       if (botComment) {
      #         github.rest.issues.updateComment({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           comment_id: botComment.id,
      #           body: output
      #         })
      #       } else {
      #         github.rest.issues.createComment({
      #           issue_number: context.issue.number,
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           body: output
      #         })
      #       }
